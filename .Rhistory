plt.ylim([0.0, 1.05])
plt.xlabel("False Positive Rate",fontsize = 14,fontname='Arial')
plt.ylabel("True Positive Rate",fontsize = 14)
plt.title("")
plt.legend(loc="lower right",fontsize = 12)
plt.savefig("../figure/BA_model_benchmark.pdf",dpi = 300,transparent=True)
plt.show()
#python
Automate = pd.read_csv("../data/Automated_benchmark.csv")
BA_result = pd.read_csv("../data/BA_Automated_prediction_result.csv".)
BA_fpr,BA_tpr,_ = roc_curve(BA_result["label"],BA_result["prediction"],pos_label=1)
BA_roc = auc(BA_fpr,BA_tpr)
netMHC_result = pd.read_csv("../data/netMHCIIpan_Auto_filter_ba_result.csv")
netMHC_result = netMHC_result[["allele","percentile_rank","peptide","ic50"]]
Automate = Automate[["allele","allele1","peptide_sequence","measurement_value"]]
netMHC_result = pd.merge(netMHC_result,Automate,left_on=["allele","peptide"],right_on=["allele","peptide_sequence"]).drop_duplicates()
BA_allele = pd.read_csv("../data/BA_allele.csv",header=None,names=["allele"])
bool = netMHC_result["allele1"].map(lambda x : x in BA_allele["allele"].values)
netMHC_result = netMHC_result[bool]
net_fpr,net_tpr,_ = roc_curve(netMHC_result["measurement_value"],1-netMHC_result["percentile_rank"],pos_label=1)
net_roc = auc(net_fpr,net_tpr)
mix_result = pd.read_csv("../data/mixMHC2pred_Auto_filter_ba_result.csv")
mix_data = pd.read_csv("../data/mixMHC2pred_Automated.csv")
mix_result = pd.merge(mix_result[["Peptide","BestAllele","%Rank_best"]],mix_data[["Description","new_allele","label","Allele Name1"]],left_on =["Peptide","BestAllele"],right_on=["Description","new_allele"]).drop_duplicates()
mix_result = mix_result[mix_result["Allele Name1"].isin(BA_allele["allele"])]
mix_fpr,mix_tpr,_ = roc_curve(mix_result["label"],1-mix_result["%Rank_best"],pos_label=1)
mix_roc = auc(mix_fpr,mix_tpr)
cmap = plt.get_cmap('Set1')
colors = [mpl.colors.rgb2hex(cmap(i)[:3]) for i in range(3)]
fig,ax = plt.subplots(figsize = (8,8))
lw = 2
plt.plot(BA_fpr,BA_tpr,lw=lw,color = colors[0],label="BA_model (AUC = %0.4f)" % BA_roc,)
plt.plot(net_fpr,net_tpr,lw=lw,color = colors[1],label="NetMHCIIpan_BA (AUC = %0.4f)" % net_roc,)
plt.plot(mix_fpr,mix_tpr,lw=lw,color = colors[2],label="mixMHC2pred (AUC = %0.4f)" % mix_roc,)
plt.plot([0, 1], [0, 1], color="navy", lw=lw, linestyle="--")
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("False Positive Rate",fontsize = 14,fontname='Arial')
plt.ylabel("True Positive Rate",fontsize = 14)
plt.title("")
plt.legend(loc="lower right",fontsize = 12)
plt.savefig("../figure/BA_model_benchmark.pdf",dpi = 300,transparent=True)
plt.show()
#python
result = pd.read_csv("../data/kmer_result.csv")
result_kmer = IMM_process(result,peptide)
result_kmer = result_kmer[result_kmer["pep_ID"].isin(result_15mer["pep_ID"])]
kmer_result = auc_pr(result_kmer,"Immunogenicity","prediction")
print("AUC:{}".format(kmer_result[4]))
print("PR_AUC:{}".format(kmer_result[5]))
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['pdf.fonttype'] = 42
mpl.rcParams['ps.fonttype'] = 42
plt.rcParams.update({'font.family':'Arial'})
import seaborn as sns
import numpy as np
from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.metrics import roc_curve,auc,confusion_matrix,precision_score,recall_score,precision_recall_curve
import matplotlib as mpl
import sys
sys.path.append("../Python")
from Delongtest import DelongTest
#python
peptide = pd.read_csv("../data/nature_peptide.csv")
HLA = pd.read_csv("../data/nature_HLA.csv")
peptide = peptide.drop_duplicates()
peptide["Immunogenicity"].value_counts()
peptide["Len"] = peptide["Peptide"].map(len)
peptide[peptide["Len"]>=15]["Peptide"].to_csv("../data/pep_only.txt",header = None,index = None,sep = " ")#chain indexing
IEDB_pep = peptide[peptide["Len"]>=15].reset_index(drop = True)
IEDB_pep["num"] = [x+1 for x in range(len(IEDB_pep))]#used to predict by IEDB tools
pep_ID = ["Pep{}".format(x+1) for x in range(len(peptide))]
peptide["pep_ID"] = pep_ID
fig,ax = plt.subplots()
sns.countplot(data = peptide,x = "Len")
plt.show()
#python
ax = sns.countplot(data=peptide, x="Immunogenicity")
#ax.bar_label(ax.containers[0])
ax.text(-0.1, 860, "{:.3f}".format(851/931))
ax.text(0.9, 90, "{:.3f}".format(80/931))
plt.savefig("../figure/nature_immuno_rate.pdf",dpi = 300,transparent=True)
plt.show()
#python
Data = pd.merge(HLA,peptide)
IMM_train_data_allele = pd.read_csv("../data/IEDB_MHCII_immuno_allele.csv",header = None,names = ["HLA"])
Data = Data[Data["HLA"].isin(IMM_train_data_allele["HLA"])]
pseudo_seq = pd.read_table("../data/pseudosequence.2016.all.X.dat",header = None,names = ["HLA","sequence"])
Data1 = pd.merge(Data,pseudo_seq)
Data1["length"] = Data1["Peptide"].map(len)
Data1 = Data1[Data1["length"]>=13]
Data1 = Data1.reset_index(drop = True)
#15mer
def mer15(Pep):
P = []
Length = 15
for i in range(len(Pep) - Length +1):
pep = Pep[i:i+Length]
P.append(pep)
return P
DF15 = pd.DataFrame()
for i in range(len(Data1)):
pep = mer15(Data1["Peptide"][i])
df = pd.DataFrame(pep)
df["pep_ID"] = Data1["pep_ID"][i]
df["HLA"] = Data1["HLA"][i]
DF15 = pd.concat([DF15,df])
DF15.columns = ["pep","pep_ID","HLA"]
benchmark_data = pd.merge(DF15,pseudo_seq)
benchmark_data.to_csv("../data/15mer_data.csv")
benchmark_data["pep"].to_csv("../data/15mer_pep_only.txt",header = None,index = None,sep = " ")
#kmer
def kmer(Pep,sa,end):
P = []
R = range(sa,end+1)
for i in R:
Length = i
for i in range(len(Pep) - Length +1):
pep = Pep[i:i+Length]
P.append(pep)
return P
DF_k = pd.DataFrame()
for i in range(len(Data1)):
pep = kmer(Data1["Peptide"][i],13,21)
df = pd.DataFrame(pep)
df["pep_ID"] = Data1["pep_ID"][i]
df["HLA"] = Data1["HLA"][i]
DF_k = pd.concat([DF_k,df])
DF_k.columns = ["pep","pep_ID","HLA"]
benchmark_data = pd.merge(DF_k,pseudo_seq)
benchmark_data.to_csv("../data/kmer_data.csv")
#python
def IMM_process(Data,peptide):
sam_pep_ID = Data["pep_ID"].unique()
res = []
p_ID = []
Data["length"] = Data["pep"].map(len)
for a in sam_pep_ID:
Mean = []
ID = Data[Data["pep_ID"] == a]
for i in ID["HLA"].unique():
Data_HLA = ID[ID["HLA"] == i]
prediction = []
for l in Data_HLA["length"].unique():
Data_len = Data_HLA[Data_HLA["length"] == l]
pre = Data_len["prediction"].max()
prediction.append(pre)
x = np.max(prediction)
Mean.append(x)
res.append(max(Mean))
p_ID.append(a)
result = pd.DataFrame({"pep_ID":p_ID,"prediction":res})
result = result.merge(peptide,how = "inner",on = "pep_ID" )
return result
def auc_pr(data,true_label,prediction,rank = False):
if rank:
fpr,tpr,_ = roc_curve(data[true_label],1-data[prediction])
precision,recall,_ = precision_recall_curve(data[true_label],1-data[prediction])
else:
fpr,tpr,_ = roc_curve(data[true_label],data[prediction])
precision,recall,_ = precision_recall_curve(data[true_label],data[prediction])
AUC = auc(fpr,tpr)
PR = auc(recall,precision)
return fpr,tpr,recall,precision,AUC,PR
result = pd.read_csv("../data/15mer_result.csv")
result_15mer = IMM_process(result,peptide)
mer15_result = auc_pr(result_15mer,"Immunogenicity","prediction")
print("AUC:{}".format(mer15_result[4]))
print("PR_AUC:{}".format(mer15_result[5]))
#python
result = pd.read_csv("../data/kmer_result.csv")
result_kmer = IMM_process(result,peptide)
result_kmer = result_kmer[result_kmer["pep_ID"].isin(result_15mer["pep_ID"])]
kmer_result = auc_pr(result_kmer,"Immunogenicity","prediction")
print("AUC:{}".format(kmer_result[4]))
print("PR_AUC:{}".format(kmer_result[5]))
#python
IEDB_res = pd.read_csv("../data/IEDB_CD4_tools_manually.csv")
Imm_score = []
pro_num = []
for i in IEDB_res["Protein Number"].unique():
y = IEDB_res[IEDB_res["Protein Number"] == i]
imm_score = y["Immunogenicity Score"].mean()
pro_num.append(i)
Imm_score.append(imm_score)
IEDB_result = pd.DataFrame({"num":pro_num,"score":Imm_score})
IEDB_result = pd.merge(IEDB_result,IEDB_pep)
IEDB_result = IEDB_result[IEDB_result["Peptide"].isin(result_15mer["Peptide"])]
IEDB_score = auc_pr(IEDB_result,"Immunogenicity","score",rank = True)
print("AUC:{}".format(IEDB_score[4]))
print("PR_AUC:{}".format(IEDB_score[5]))
#python
Repitope_result = pd.read_csv("../data/repitope_15mer_result.csv")
Repitope = pd.merge(Repitope_result,DF15,left_on = "Peptide",right_on = "pep")
sam_pep_ID = Repitope["pep_ID"].unique()
res = []
p_ID = []
for a in sam_pep_ID:
Mean = []
ID = Repitope[Repitope["pep_ID"] == a]
for i in ID["HLA"].unique():
x = ID[ID["HLA"] == i]
x_mean = x["ImmunogenicityScore"].mean()
Mean.append(x_mean)
res.append(max(Mean))
p_ID.append(a)
dic = {"pep_ID":p_ID,"ImmunogenicityScore":res}
Repitope_pre = pd.DataFrame(dic)
Repitope_result = Repitope_pre.merge(peptide,how = "inner",on = "pep_ID" )
Repitope_score = auc_pr(Repitope_result,"Immunogenicity","ImmunogenicityScore")
print("AUC:{}".format(Repitope_score[4]))
print("PR_AUC:{}".format(Repitope_score[5]))
#python
def netMHCIIpan_process(result,allele,ori_sorted,peptide):
#combine two type allele
result = pd.merge(result,allele,left_on="allele",right_on="Allele Name")
result_sorted = result.sort_values(by=["peptide","HLA"]).reset_index(drop = True)
#combine with ori data
result_combined = pd.merge(result_sorted,ori_sorted[["pep","pep_ID"]],left_on = "peptide",right_on ="pep")
#result_combined["pep_length"] = result_combined["peptide"].map(len)
sam_pep_ID = result_combined["pep_ID"].unique()
res = []
p_ID = []
for a in sam_pep_ID:
Mean = []
ID = result_combined[result_combined["pep_ID"] == a]
#get Mean of all splited pep and Max of all HLA
for i in ID["Allele Name"].unique():
Data_HLA = ID[ID["Allele Name"] == i]
prediction = []
for l in Data_HLA["pep_length"].unique():
Data_len = Data_HLA[Data_HLA["pep_length"] == l]
pre = Data_len["percentile_rank"].min()
prediction.append(pre)
x = np.min(prediction)
res.append(np.min(x))
p_ID.append(a)
final_result = pd.DataFrame({"pep_ID":p_ID,"prediction":res})
final_result = final_result.merge(peptide,how = "inner",on = "pep_ID" )
return final_result
#python
def netMHCIIpan_process(result,allele,ori_sorted,peptide):
#combine two type allele
result = pd.merge(result,allele,left_on="allele",right_on="Allele Name")
result_sorted = result.sort_values(by=["peptide","HLA"]).reset_index(drop = True)
#combine with ori data
result_combined = pd.merge(result_sorted,ori_sorted[["pep","pep_ID"]],left_on = "peptide",right_on ="pep")
#result_combined["pep_length"] = result_combined["peptide"].map(len)
sam_pep_ID = result_combined["pep_ID"].unique()
res = []
p_ID = []
for a in sam_pep_ID:
Mean = []
ID = result_combined[result_combined["pep_ID"] == a]
#get Mean of all splited pep and Max of all HLA
for i in ID["Allele Name"].unique():
Data_HLA = ID[ID["Allele Name"] == i]
prediction = []
for l in Data_HLA["pep_length"].unique():
Data_len = Data_HLA[Data_HLA["pep_length"] == l]
pre = Data_len["percentile_rank"].min()
prediction.append(pre)
x = np.min(prediction)
res.append(np.min(x))
p_ID.append(a)
final_result = pd.DataFrame({"pep_ID":p_ID,"prediction":res})
final_result = final_result.merge(peptide,how = "inner",on = "pep_ID" )
return final_result
result_15mer["pre_label"] = result_15mer["prediction"].map(lambda x : 1 if x>0.5 else 0)
result_15mer_CM = confusion_matrix(result_15mer["Immunogenicity"],result_15mer["pre_label"])
result_15mer_CM = result_15mer_CM/len(result_15mer)
result_kmer["pre_label"] = result_kmer["prediction"].map(lambda x : 1 if x>0.5 else 0)
result_kmer_CM = confusion_matrix(result_kmer["Immunogenicity"],result_kmer["pre_label"])
result_kmer_CM = result_kmer_CM/len(result_kmer)
IEDB_result["pre_label"] = IEDB_result["score"].map(lambda x : 1 if x>50 else 0)
IEDB_result_CM = confusion_matrix(IEDB_result["Immunogenicity"],IEDB_result["pre_label"])
IEDB_result_CM = IEDB_result_CM/len(IEDB_result)
Repitope_result["pre_label"] = Repitope_result["ImmunogenicityScore"].map(lambda x : 1 if x>0.5 else 0)
Repitope_result_CM = confusion_matrix(Repitope_result["Immunogenicity"],Repitope_result["pre_label"])
Repitope_result_CM = Repitope_result_CM/len(Repitope_result)
def net_CM(data):
data["pre_label"] = data["prediction"].map(lambda x : 1 if x<10 else 0)
data_CM = confusion_matrix(data["Immunogenicity"],data["pre_label"])
data_CM = data_CM/len(data)
return data_CM
net_15mer_ba_CM = net_CM(net_15mer_ba)
net_15mer_el_CM = net_CM(net_15mer_el)
net_kmer_ba_CM = net_CM(net_kmer_ba)
net_kmer_el_CM = net_CM(net_kmer_el)
CM_all = [result_15mer_CM,result_kmer_CM,IEDB_result_CM,Repitope_result_CM,net_15mer_ba_CM,net_15mer_el_CM,net_kmer_ba_CM,net_kmer_el_CM]
#python
def netMHCIIpan_process(result,allele,ori_sorted,peptide):
#combine two type allele
result = pd.merge(result,allele,left_on="allele",right_on="Allele Name")
result_sorted = result.sort_values(by=["peptide","HLA"]).reset_index(drop = True)
#combine with ori data
result_combined = pd.merge(result_sorted,ori_sorted[["pep","pep_ID"]],left_on = "peptide",right_on ="pep")
#result_combined["pep_length"] = result_combined["peptide"].map(len)
sam_pep_ID = result_combined["pep_ID"].unique()
res = []
p_ID = []
for a in sam_pep_ID:
Mean = []
ID = result_combined[result_combined["pep_ID"] == a]
#get Mean of all splited pep and Max of all HLA
for i in ID["Allele Name"].unique():
Data_HLA = ID[ID["Allele Name"] == i]
prediction = []
for l in Data_HLA["pep_length"].unique():
Data_len = Data_HLA[Data_HLA["pep_length"] == l]
pre = Data_len["percentile_rank"].min()
prediction.append(pre)
x = np.min(prediction)
res.append(np.min(x))
p_ID.append(a)
final_result = pd.DataFrame({"pep_ID":p_ID,"prediction":res})
final_result = final_result.merge(peptide,how = "inner",on = "pep_ID" )
return final_result
DF15_sorted = DF15.sort_values(by=["pep","HLA"]).reset_index(drop = True)
allele = pd.read_csv("/Users/wangguangshuai/Data/MHCII/Data/IMM_model_benchmark/allele.csv")
netMHCIIpan_ba = pd.read_csv("/Users/wangguangshuai/Data/MHCII/Data/IMM_model_benchmark/netMHCIIpan_15_mer_ba.csv")
netMHCIIpan_ba["pep_length"] = netMHCIIpan_ba["peptide"].map(len)
net_15mer_ba = netMHCIIpan_process(netMHCIIpan_ba,allele,DF15_sorted,peptide)
mer15_ba_result = auc_pr(net_15mer_ba,"Immunogenicity","prediction",rank = True)
print("AUC:{}".format(mer15_ba_result[4]))
print("PR_AUC:{}".format(mer15_ba_result[5]))
netMHCIIpan_el = pd.read_csv("/Users/wangguangshuai/Data/MHCII/Data/IMM_model_benchmark/netMHCIIpan_15_mer_el.csv")
netMHCIIpan_el["pep_length"] = netMHCIIpan_el["peptide"].map(len)
net_15mer_el = netMHCIIpan_process(netMHCIIpan_el,allele,DF15_sorted,peptide)
mer15_el_result = auc_pr(net_15mer_el,"Immunogenicity","prediction",rank = True)
print("AUC:{}".format(mer15_el_result[4]))
print("PR_AUC:{}".format(mer15_el_result[5]))
DF_k_sorted = DF_k.sort_values(by=["pep","HLA"]).reset_index(drop = True)
netMHCIIpan_ba_k = pd.read_csv("/Users/wangguangshuai/Data/MHCII/Data/IMM_model_benchmark/netMHCIIpan_k_mer_ba.csv")
netMHCIIpan_ba_k["pep_length"] =netMHCIIpan_ba_k["peptide"].map(len)
net_kmer_ba = netMHCIIpan_process(netMHCIIpan_ba_k,allele,DF_k_sorted,peptide)
kmer_ba_result = auc_pr(net_kmer_ba,"Immunogenicity","prediction",rank = True)
netMHCIIpan_el_k = pd.read_csv("../data/netMHCIIpan_k_mer_el.csv")
netMHCIIpan_el_k["pep_length"] =netMHCIIpan_el_k["peptide"].map(len)
net_kmer_el = netMHCIIpan_process(netMHCIIpan_el_k,allele,DF_k_sorted,peptide)
kmer_el_result = auc_pr(net_kmer_el,"Immunogenicity","prediction",rank = True)
print("BA AUC: {}".format(kmer_ba_result[4]))
print("BA PR_AUC: {}".format(kmer_ba_result[5]))
print("EL AUC: {}".format(kmer_el_result[4]))
print("EL PR_AUC: {}".format(kmer_el_result[5]))
net_15mer_ba = net_15mer_ba.rename(columns = {"prediction":"net_prediction"})
p_test_15mer = pd.merge(result_15mer,net_15mer_ba)
z_score_15mer,p_val_15mer = DelongTest(p_test_15mer["prediction"],100-p_test_15mer["net_prediction"],p_test_15mer["Immunogenicity"]).show_result()
p_val_15mer
net_15mer_ba = net_15mer_ba.rename(columns = {"prediction":"net_prediction"})
p_test_15mer = pd.merge(result_15mer,net_15mer_ba)
z_score_15mer,p_val_15mer = DelongTest(p_test_15mer["prediction"],100-p_test_15mer["net_prediction"],p_test_15mer["Immunogenicity"]).show_result()
p_val_15mer
net_kmer_ba = net_kmer_ba.rename(columns = {"prediction":"net_prediction"})
p_test_kmer = pd.merge(result_kmer,net_kmer_ba)
z_score_kmer,p_val_kmer = DelongTest(p_test_kmer["prediction"],100-p_test_kmer["net_prediction"],p_test_kmer["Immunogenicity"]).show_result()
p_val_kmer
#python
fig,ax = plt.subplots(figsize = (8,8))
lw = 2
ax.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
ax.plot(mer15_result[0],mer15_result[1],label='TLimmuno2 : (AUC={0:.4f})'.format(mer15_result[4]), lw=lw)
ax.plot(IEDB_score[0],IEDB_score[1],label='IEDB : (AUC={0:.4f})'.format(IEDB_score[4]), lw=lw)
ax.plot(Repitope_score[0],Repitope_score[1],label='Repitope : (AUC={0:.4f})'.format(Repitope_score[4]), lw=lw)
ax.plot(mer15_ba_result[0],mer15_ba_result[1],label='NetMHCIIpan_ba : (AUC={0:.4f})'.format(mer15_ba_result[4]), lw=lw)
ax.plot(mer15_el_result[0],mer15_el_result[1],label='NetMHCIIpan_el : (AUC={0:.4f})'.format(mer15_el_result[4]), lw=lw)
ax.set_ylim([0,1.05])
ax.set_xlim([0,1])
ax.set_xlabel('False Positive Rate',fontsize = 14)
ax.set_ylabel('True Positive Rate',fontsize = 14)
ax.legend(loc="lower right",fontsize = 12)
plt.savefig("../figure/benchmark_15mer.pdf",dpi = 300,transparent=True)
plt.show()
#python
fig,ax = plt.subplots(figsize = (8,8))
lw = 2
ax.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
ax.plot(kmer_result[0],kmer_result[1],label='TLimmuno2 : (AUC={0:.4f})'.format(kmer_result[4]))
ax.plot(kmer_ba_result[0],kmer_ba_result[1],label='NetMHCIIpan_ba : (AUC={0:.4f})'.format(kmer_ba_result[4]))
ax.plot(kmer_el_result[0],kmer_el_result[1],label='NetMHCIIpan_el : (AUC={0:.4f})'.format(kmer_el_result[4]))
ax.set_ylim([0,1.05])
ax.set_xlim([0,1])
ax.set_xlabel('False Positive Rate',fontsize = 14)
ax.set_ylabel('True Positive Rate',fontsize = 14)
ax.legend(loc="lower right",fontsize = 12)
plt.savefig("../figure/benchmark_kmer.pdf",dpi = 300,transparent=True)
plt.show()
#python
fig,ax = plt.subplots(figsize = (8,8))
lw = 2
ax.plot(mer15_result[2],mer15_result[3],label='TIMM2pred : (AUC={0:.4f})'.format(mer15_result[5]))
ax.plot(IEDB_score[2],IEDB_score[3],label='IEDB : (AUC={0:.4f})'.format(IEDB_score[5]))
ax.plot(Repitope_score[2],Repitope_score[3],label='Repitope : (AUC={0:.4f})'.format(Repitope_score[5]))
ax.plot(mer15_ba_result[2],mer15_ba_result[3],label='NetMHCIIpan_ba : (AUC={0:.4f})'.format(mer15_ba_result[5]))
ax.plot(mer15_el_result[2],mer15_el_result[3],label='NetMHCIIpan_el : (AUC={0:.4f})'.format(mer15_el_result[5]))
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('Recall',fontsize = 14)
plt.ylabel('Precision',fontsize = 14)
plt.legend(loc="upper right",fontsize = 12)
plt.savefig("../figure/15mer_PR.pdf",dpi = 300,transparent=True)
plt.show()
#python
fig,ax = plt.subplots(figsize = (8,8))
lw = 2
ax.plot(mer15_result[2],mer15_result[3],label='TIMM2pred : (AUC={0:.4f})'.format(mer15_result[5]))
ax.plot(IEDB_score[2],IEDB_score[3],label='IEDB : (AUC={0:.4f})'.format(IEDB_score[5]))
ax.plot(Repitope_score[2],Repitope_score[3],label='Repitope : (AUC={0:.4f})'.format(Repitope_score[5]))
ax.plot(mer15_ba_result[2],mer15_ba_result[3],label='NetMHCIIpan_ba : (AUC={0:.4f})'.format(mer15_ba_result[5]))
ax.plot(mer15_el_result[2],mer15_el_result[3],label='NetMHCIIpan_el : (AUC={0:.4f})'.format(mer15_el_result[5]))
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('Recall',fontsize = 14)
plt.ylabel('Precision',fontsize = 14)
plt.legend(loc="upper right",fontsize = 12)
plt.savefig("../figure/15mer_PR.pdf",dpi = 300,transparent=True)
plt.show()
#python
fig,ax = plt.subplots(figsize = (8,8))
lw = 2
ax.plot(kmer_result[2],kmer_result[3],label='TIMM2pred : (AUC={0:.4f})'.format(kmer_result[5]))
ax.plot(kmer_ba_result[2],kmer_ba_result[3],label='NetMHCIIpan_ba : (AUC={0:.4f})'.format(kmer_ba_result[5]))
ax.plot(kmer_el_result[2],kmer_el_result[3],label='NetMHCIIpan_el : (AUC={0:.4f})'.format(kmer_el_result[5]))
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('Recall',fontsize = 14)
plt.ylabel('Precision',fontsize = 14)
plt.legend(loc="upper right",fontsize = 12)
plt.savefig("../figure/kmer_pr.pdf",dpi = 300,transparent=True)
plt.show()
result_15mer["pre_label"] = result_15mer["prediction"].map(lambda x : 1 if x>0.5 else 0)
result_15mer_CM = confusion_matrix(result_15mer["Immunogenicity"],result_15mer["pre_label"])
result_15mer_CM = result_15mer_CM/len(result_15mer)
result_kmer["pre_label"] = result_kmer["prediction"].map(lambda x : 1 if x>0.5 else 0)
result_kmer_CM = confusion_matrix(result_kmer["Immunogenicity"],result_kmer["pre_label"])
result_kmer_CM = result_kmer_CM/len(result_kmer)
IEDB_result["pre_label"] = IEDB_result["score"].map(lambda x : 1 if x>50 else 0)
IEDB_result_CM = confusion_matrix(IEDB_result["Immunogenicity"],IEDB_result["pre_label"])
IEDB_result_CM = IEDB_result_CM/len(IEDB_result)
Repitope_result["pre_label"] = Repitope_result["ImmunogenicityScore"].map(lambda x : 1 if x>0.5 else 0)
Repitope_result_CM = confusion_matrix(Repitope_result["Immunogenicity"],Repitope_result["pre_label"])
Repitope_result_CM = Repitope_result_CM/len(Repitope_result)
def net_CM(data):
data["pre_label"] = data["prediction"].map(lambda x : 1 if x<10 else 0)
data_CM = confusion_matrix(data["Immunogenicity"],data["pre_label"])
data_CM = data_CM/len(data)
return data_CM
net_15mer_ba_CM = net_CM(net_15mer_ba)
net_15mer_el_CM = net_CM(net_15mer_el)
net_kmer_ba_CM = net_CM(net_kmer_ba)
net_kmer_el_CM = net_CM(net_kmer_el)
CM_all = [result_15mer_CM,result_kmer_CM,IEDB_result_CM,Repitope_result_CM,net_15mer_ba_CM,net_15mer_el_CM,net_kmer_ba_CM,net_kmer_el_CM]
net_15mer_ba_CM
net_15mer_ba
View(net_15mer_el)
View(net_15mer_ba)
DF15_sorted = DF15.sort_values(by=["pep","HLA"]).reset_index(drop = True)
allele = pd.read_csv("/Users/wangguangshuai/Data/MHCII/Data/IMM_model_benchmark/allele.csv")
netMHCIIpan_ba = pd.read_csv("/Users/wangguangshuai/Data/MHCII/Data/IMM_model_benchmark/netMHCIIpan_15_mer_ba.csv")
netMHCIIpan_ba["pep_length"] = netMHCIIpan_ba["peptide"].map(len)
net_15mer_ba = netMHCIIpan_process(netMHCIIpan_ba,allele,DF15_sorted,peptide)
mer15_ba_result = auc_pr(net_15mer_ba,"Immunogenicity","prediction",rank = True)
print("AUC:{}".format(mer15_ba_result[4]))
print("PR_AUC:{}".format(mer15_ba_result[5]))
DF_k_sorted = DF_k.sort_values(by=["pep","HLA"]).reset_index(drop = True)
netMHCIIpan_ba_k = pd.read_csv("/Users/wangguangshuai/Data/MHCII/Data/IMM_model_benchmark/netMHCIIpan_k_mer_ba.csv")
netMHCIIpan_ba_k["pep_length"] =netMHCIIpan_ba_k["peptide"].map(len)
net_kmer_ba = netMHCIIpan_process(netMHCIIpan_ba_k,allele,DF_k_sorted,peptide)
kmer_ba_result = auc_pr(net_kmer_ba,"Immunogenicity","prediction",rank = True)
netMHCIIpan_el_k = pd.read_csv("../data/netMHCIIpan_k_mer_el.csv")
netMHCIIpan_el_k["pep_length"] =netMHCIIpan_el_k["peptide"].map(len)
net_kmer_el = netMHCIIpan_process(netMHCIIpan_el_k,allele,DF_k_sorted,peptide)
kmer_el_result = auc_pr(net_kmer_el,"Immunogenicity","prediction",rank = True)
print("BA AUC: {}".format(kmer_ba_result[4]))
print("BA PR_AUC: {}".format(kmer_ba_result[5]))
print("EL AUC: {}".format(kmer_el_result[4]))
print("EL PR_AUC: {}".format(kmer_el_result[5]))
result_15mer["pre_label"] = result_15mer["prediction"].map(lambda x : 1 if x>0.5 else 0)
result_15mer_CM = confusion_matrix(result_15mer["Immunogenicity"],result_15mer["pre_label"])
result_15mer_CM = result_15mer_CM/len(result_15mer)
result_kmer["pre_label"] = result_kmer["prediction"].map(lambda x : 1 if x>0.5 else 0)
result_kmer_CM = confusion_matrix(result_kmer["Immunogenicity"],result_kmer["pre_label"])
result_kmer_CM = result_kmer_CM/len(result_kmer)
IEDB_result["pre_label"] = IEDB_result["score"].map(lambda x : 1 if x>50 else 0)
IEDB_result_CM = confusion_matrix(IEDB_result["Immunogenicity"],IEDB_result["pre_label"])
IEDB_result_CM = IEDB_result_CM/len(IEDB_result)
Repitope_result["pre_label"] = Repitope_result["ImmunogenicityScore"].map(lambda x : 1 if x>0.5 else 0)
Repitope_result_CM = confusion_matrix(Repitope_result["Immunogenicity"],Repitope_result["pre_label"])
Repitope_result_CM = Repitope_result_CM/len(Repitope_result)
def net_CM(data):
data["pre_label"] = data["prediction"].map(lambda x : 1 if x<10 else 0)
data_CM = confusion_matrix(data["Immunogenicity"],data["pre_label"])
data_CM = data_CM/len(data)
return data_CM
net_15mer_ba_CM = net_CM(net_15mer_ba)
net_15mer_el_CM = net_CM(net_15mer_el)
net_kmer_ba_CM = net_CM(net_kmer_ba)
net_kmer_el_CM = net_CM(net_kmer_el)
CM_all = [result_15mer_CM,result_kmer_CM,IEDB_result_CM,Repitope_result_CM,net_15mer_ba_CM,net_15mer_el_CM,net_kmer_ba_CM,net_kmer_el_CM]
CM_all = [result_15mer_CM,IEDB_result_CM,Repitope_result_CM,net_15mer_ba_CM,net_15mer_el_CM,result_kmer_CM,net_kmer_ba_CM,net_kmer_el_CM]
CM_label = ["TLimmuno2_15mer","IEDB","Repitope","NetMHCIIpanBA_15mer","NetMHCIIpanEL_15mer","TLimmuon2_kmer","NetMHCIIpanBA_kmer","NetMHCIIpanEL_kmer"]
def CM_plot(data,label):
fig,ax = plt.subplots(figsize = (4,4))
sns.heatmap(data,annot =True,cmap="YlGnBu",vmin=0, vmax=1,cbar = False)
plt.ylabel("True label")
plt.xlabel("Prediction label")
plt.title("{}".format(label))
plt.savefig("../figure/{}.pdf".format(label),dpi = 300,transparent=True)
for i,l in enumerate(CM_all):
CM_plot(l,CM_label[i])
