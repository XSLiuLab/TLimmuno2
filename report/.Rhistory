library(tidyverse)
library(reticulate)
library(DT)
library(stringr)
library(ggplot2)
use_python(Sys.which("python"))
IEDB_immuno_MHCII <- read_csv("../data/IEDB_MHCII.csv")
setwd("/Users/wangguangshuai/Code/TLimmuno2/report")
IEDB_immuno_MHCII <- read_csv("../data/IEDB_MHCII.csv")
colnames(IEDB_immuno_MHCII) <- IEDB_immuno_MHCII[1,]
IEDB_immuno_MHCII <- IEDB_immuno_MHCII[-1,]
IEDB_immuno_MHCII_filter <- IEDB_immuno_MHCII[,c(12,85,88,102,91,92,93)]  #4:pubmed ID
IEDB_immuno_MHCII_filter$`Qualitative Measure` <- str_replace(IEDB_immuno_MHCII_filter$`Qualitative Measure`,"Positive-High","Positive")
IEDB_immuno_MHCII_filter$`Qualitative Measure` <- str_replace(IEDB_immuno_MHCII_filter$`Qualitative Measure`,"Positive-Intermediate","Positive")
IEDB_immuno_MHCII_filter$`Qualitative Measure` <- str_replace(IEDB_immuno_MHCII_filter$`Qualitative Measure`,"Positive-Low","Positive")
IEDB_immuno_MHCII_filter <- IEDB_immuno_MHCII_filter[!(duplicated(IEDB_immuno_MHCII_filter)),]
IEDB_immuno_MHCII_filter$length <- sapply(IEDB_immuno_MHCII_filter$Description, nchar)
IEDB_immuno_MHCII_filter1 <- IEDB_immuno_MHCII_filter %>% filter(nchar(`Allele Name`)>=14) %>% filter(length>=13&length<=21) %>%
filter(`Method/Technique`=="51 chromium"|`Method/Technique`=="ELISA"|`Method/Technique`=="ELISPOT"|`Method/Technique`=="ICS"|`Method/Technique`=="multimer/tetramer") %>% filter(str_detect(`Allele Name`,"HLA"))
View(IEDB_immuno_MHCII_filter1)
pseduo_seq <- read_table("../data/pseudosequence.2016.all.X.dat",col_names = c("allele","sequence"))
fun <- function(x){
if (str_detect(x,"\\/")){
x = str_remove_all(x,"\\*")
x = str_remove_all(x,"\\:")
x = str_replace(x,"\\/","-")
}
else{
x = str_replace(x,"HLA-","")
x = str_replace(x,"\\*","_")
x = str_replace(x,"\\:","")
}
return(x)
}
IEDB_immuno_MHCII_filter1$`Allele Name1` <- sapply(IEDB_immuno_MHCII_filter1$`Allele Name`,fun)
View(IEDB_immuno_MHCII_filter1)
IEDB_immuno_MHCII_filter1 <- left_join(IEDB_immuno_MHCII_filter1,pseduo_seq, by = c("Allele Name1" = "allele"))
View(IEDB_immuno_MHCII_filter1)
IEDB_immuno_MHCII
View(IEDB_immuno_MHCII)
IEDB_immuno_assay <- IEDB_immuno_MHCII_filter %>% filter(nchar(`Allele Name`)>=14) %>% filter(length>=13&length<=21)
ggplot(data = IEDB_immuno_assay)+
geom_histogram(aes(x = `Method/Technique`),stat = "count")+xlab("Expirement Type")+ylab("Number")
IEDB_immuno_assay <- IEDB_immuno_MHCII_filter %>% filter(nchar(`Allele Name`)>=14) %>% filter(length>=13&length<=21) %>% group_by(`Method/Technique`) %>% summarise(num = n())
View(IEDB_immuno_assay)
ggplot(data = IEDB_immuno_assay)+
geom_col(aes(x = reorder(`Method/Technique`,num)),y=num)+xlab("Expirement Type")+ylab("Number")
ggplot(data = IEDB_immuno_assay)+
geom_col(aes(x = reorder(`Method/Technique`,num),y=num))+xlab("Expirement Type")+ylab("Number")
ggplot(data = IEDB_immuno_assay)+
geom_col(aes(x = reorder(`Method/Technique`,-num),y=num))+xlab("Expirement Type")+ylab("Number") + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
View(IEDB_immuno_MHCII_filter)
View(IEDB_immuno_MHCII_filter1)
#R
Dataset <- read_table("../data/mhcii_initial_benchmark_datasets.tsv")
Dataset_binary <- Dataset %>% filter(measurement_type == "binary")
Dataset_ic50 <- Dataset %>% filter(measurement_type == "ic50")
fun <- function(x){
if(x<=500){y=1}
else{y=0}
return(y)
}
quativate <- sapply(Dataset_ic50$measurement_value, fun)
Dataset_ic50$measurement_value <- quativate
Dataset_final <- rbind(Dataset_binary,Dataset_ic50)
pseduo_seq <- read_table("../data/pseudosequence.2016.all.X.dat",col_names = c("allele","sequence"))
fun <- function(x){
if (str_detect(x,"\\/")){
x = str_remove_all(x,"\\*")
x = str_remove_all(x,"\\:")
x = str_replace(x,"\\/","-")
}
else{
x = str_replace(x,"HLA-","")
x = str_replace(x,"\\*","_")
x = str_replace(x,"\\:","")
}
return(x)
}
Dataset_final$allele1 = sapply(Dataset_final$allele,fun)
Dataset_final <- left_join(Dataset_final,pseduo_seq, by = c("allele1" = "allele"))
Dataset_final <-  na.omit(Dataset_final)
Dataset_final$length <- sapply(Dataset_final$peptide_sequence,nchar)
Dataset_final <- Dataset_final %>% filter(length>=13&length<=21)
BA <- read_csv("../data/BA_MHC_label.csv")
Automated_filter <- anti_join(Dataset_final,BA,by = c("peptide_sequence" = "peptide","allele1"="MHC")) #Delete the data contained in the training dataset
write_csv(Dataset_final,"../data/Automated_benchmark.csv")
write_csv(Automated_filter,"../data/Automated_benchmark_filter.csv")
reticulate::repl_python()
library(tidyverse)
library(reticulate)
library(DT)
use_python(Sys.which("python"))
reticulate::repl_python()
